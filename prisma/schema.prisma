generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// users
model User {
  id                   String        @id @default(uuid()) @db.Uuid
  firstName            String        @map("first_name")
  lastName             String        @map("last_name")
  email                String        @unique
  password             String
  phoneNumber          String?       @map("phone_number")
  zipCode              String        @map("zip_code")
  avatarUrl            String?       @map("avatar_url")
  avatarPublicId       String?       @map("avatar_public_id")
  createdAt            DateTime      @default(now()) @map("created_at")
  updatedAt            DateTime      @updatedAt @map("updated_at")

  comments             ItemComment[] @relation("UserComments")
  items                Item[]        @relation("UserItems")
  messages             Message[]     @relation("UserMessages")
  seenMarks            SeenMark[]
  threadsAsOwner       Thread[]      @relation("OwnerThreads")
  threadsAsParticipant Thread[]      @relation("ParticipantThreads")

  @@map("users")
}

/// categories
model Category {
  name      String   @id @unique @map("category_name")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  items     Item[]

  @@map("categories")
}

/// items
model Item {
  id           String        @id @default(uuid()) @db.Uuid
  ownerId      String        @map("owner_id") @db.Uuid
  categoryName String        @map("category_name")
  title        String
  description  String?
  status       ItemStatus
  isResolved   Boolean       @default(false) @map("is_resolved")
  dateReported DateTime      @default(now()) @map("date_reported")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  zipCode      String        @map("zip_code")
  latitude     Float?
  longitude    Float?
  comments     ItemComment[]
  photos       ItemPhoto[]
  category     Category      @relation(fields: [categoryName], references: [name])
  owner        User          @relation("UserItems", fields: [ownerId], references: [id])
  seenMarks    SeenMark[]
  threads      Thread[]

  @@index([status, dateReported])
  @@index([categoryName])
  @@index([ownerId])
  @@index([zipCode])            // index by ZIP
  @@map("items")
}

/// item_photos
model ItemPhoto {
  id        String   @id @default(uuid()) @db.Uuid
  itemId    String   @map("item_id") @db.Uuid
  url       String
  createdAt DateTime @default(now()) @map("created_at")
  item      Item     @relation(fields: [itemId], references: [id])

  @@index([itemId])
  @@map("item_photos")
}

/// item_comments
model ItemComment {
  id        String   @id @default(uuid()) @db.Uuid
  itemId    String   @map("item_id") @db.Uuid
  authorId  String   @map("author_id") @db.Uuid
  body      String
  createdAt DateTime @default(now()) @map("created_at")
  author    User     @relation("UserComments", fields: [authorId], references: [id])
  item      Item     @relation(fields: [itemId], references: [id])

  @@index([itemId])
  @@index([authorId])
  @@index([itemId, createdAt])  // index for recent comments
  @@map("item_comments")
}

/// seen_marks
model SeenMark {
  id        String   @id @default(uuid()) @db.Uuid
  itemId    String   @map("item_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  item      Item     @relation(fields: [itemId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([itemId, userId])
  @@index([itemId])
  @@index([userId])
  @@map("seen_marks")
}

/// threads
model Thread {
  id            String    @id @default(uuid()) @db.Uuid
  itemId        String    @map("item_id") @db.Uuid
  ownerId       String    @map("owner_id") @db.Uuid
  participantId String    @map("participant_id") @db.Uuid
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // per-user "read up to" (MVP: двухсторонний диалог)
  ownerLastReadMessageId       String?   @db.Uuid @map("owner_last_read_message_id")
  ownerLastReadAt              DateTime? @map("owner_last_read_at")
  participantLastReadMessageId String?   @db.Uuid @map("participant_last_read_message_id")
  participantLastReadAt        DateTime? @map("participant_last_read_at")

  messages      Message[]
  item          Item      @relation(fields: [itemId], references: [id])
  owner         User      @relation("OwnerThreads", fields: [ownerId], references: [id])
  participant   User      @relation("ParticipantThreads", fields: [participantId], references: [id])

  @@index([itemId])
  @@index([ownerId])
  @@index([participantId])
  @@index([ownerLastReadMessageId])
  @@index([participantLastReadMessageId])
  @@unique([itemId, participantId])   // enforce 1:1 per item+participant
  @@map("threads")
}

/// messages
model Message {
  id            String   @id @default(uuid()) @db.Uuid
  threadId      String   @map("thread_id") @db.Uuid
  senderId      String   @map("sender_id") @db.Uuid
  body          String
  attachmentUrl String?  @map("attachment_url")
  createdAt     DateTime @default(now()) @map("created_at")

  sender        User     @relation("UserMessages", fields: [senderId], references: [id])
  thread        Thread   @relation(fields: [threadId], references: [id])

  // Индексы под пагинацию «новые сверху»
  @@index([threadId, createdAt(sort: Desc)])
  @@index([senderId])
  @@map("messages")
}

/// enums
enum ItemStatus {
  LOST     @map("lost")
  FOUND    @map("found")
  RESOLVED @map("resolved")
}
