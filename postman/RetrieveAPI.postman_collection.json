{
	"info": {
		"_postman_id": "d79ec9cb-aff4-49de-bab4-970a4e9fb9c8",
		"name": "Retrieve API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4029503"
	},
	"item": [
		{
			"name": "DB health check",
			"item": [
				{
					"name": "Healthz DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check status code\r",
									"pm.test(\"DB health endpoint is reachable\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"DB is connected\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.db).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"DB health response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Health check success flag is true\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/healthz/db",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"healthz",
								"db"
							]
						}
					},
					"response": []
				},
				{
					"name": "Healthz",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check success flag\r",
									"pm.test(\"Response has success=true\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true);\r",
									"});\r",
									"\r",
									"// Check status inside data\r",
									"pm.test(\"App status is OK\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.status).to.eql(\"ok\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is under 300ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/healthz",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"healthz"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "POST - Register user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", () => {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"if (jsonData.success && jsonData.data) {\r",
									"    const user = jsonData.data.user;\r",
									"    const token = jsonData.data.accessToken;\r",
									"\r",
									"    // Save user info to environment variables\r",
									"    pm.environment.set(\"userId\", user.id || \"\");\r",
									"    pm.environment.set(\"email\", user.email || \"\");\r",
									"    pm.environment.set(\"firstName\", user.firstName || \"\");\r",
									"    pm.environment.set(\"lastName\", user.lastName || \"\");\r",
									"    pm.environment.set(\"zipCode\", user.zipCode || \"\");\r",
									"    pm.environment.set(\"phoneNumber\", user.phoneNumber || \"\");\r",
									"    pm.environment.set(\"avatarUrl\", user.avatarUrl || \"\");\r",
									"\r",
									"    // Save JWT if returned\r",
									"    if (token) {\r",
									"        pm.environment.set(\"token\", token);\r",
									"    }\r",
									"\r",
									"    // Tests\r",
									"    pm.test(\"Email matches input\", () => {\r",
									"        const expectedEmail = pm.environment.get(\"generatedEmail\");\r",
									"        pm.expect(user.email).to.eql(expectedEmail);\r",
									"    });\r",
									"\r",
									"\r",
									"    pm.test(\"First and last name are correct\", () => {\r",
									"        pm.expect(user.firstName).to.eql(\"User\");\r",
									"        pm.expect(user.lastName).to.eql(\"Test\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Zip code and phone number are correct\", () => {\r",
									"        pm.expect(user.zipCode).to.eql(\"95050\");\r",
									"        pm.expect(user.phoneNumber).to.eql(\"1234567890\");\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is under 500ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomInt = Math.floor(Math.random() * 1000);\r",
									"const email = `user${randomInt}@example.com`;\r",
									"\r",
									"pm.environment.set(\"generatedEmail\", email);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{generatedEmail}}\",\r\n  \"password\": \"p@ssword#135\",\r\n  \"confirmPassword\": \"p@ssword#135\",\r\n  \"firstName\": \"User\",\r\n  \"lastName\": \"Test\",\r\n  \"zipCode\": \"95050\",\r\n  \"phoneNumber\": \"1234567890\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG Register user - Duplicate email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should fail with 409 and EMAIL_TAKEN error\", function () {\r",
									"  pm.response.to.have.status(409);\r",
									"  const res = pm.response.json();\r",
									"\r",
									"  pm.expect(res.success).to.eql(false);\r",
									"  pm.expect(res.error).to.be.an(\"object\");\r",
									"  pm.expect(res.error.code).to.eql(\"EMAIL_TAKEN\");\r",
									"  pm.expect(res.error.message).to.include(\"Email is already in use\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"bob3@example.com\",\r\n  \"password\": \"p@ssw0rD#137\",\r\n  \"confirmPassword\": \"p@ssw0rD#137\",\r\n  \"firstName\": \"Bob\",\r\n  \"lastName\": \"Adams\",\r\n  \"zipCode\": \"53202\",\r\n  \"phoneNumber\": \"1234567890\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG Register user - Missing email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should fail with 400 and validation error for missing email\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res.success).to.eql(false);\r",
									"  pm.expect(res.error.code).to.eql(\"VALIDATION_ERROR\");\r",
									"  pm.expect(res.error.details).to.be.an(\"array\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"p@ssw0rD#137\",\r\n  \"confirmPassword\": \"p@ssw0rD#137\",\r\n  \"firstName\": \"Test\",\r\n  \"lastName\": \"User\",\r\n  \"zipCode\": \"95050\",\r\n  \"phoneNumber\": \"1234567890\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG Register user - Invalid email format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should fail with 400 for invalid email format\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res.error.details.some(d => d.path.includes(\"email\"))).to.be.true;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"user.example.com\",\r\n  \"password\": \"p@ssw0rD#137\",\r\n  \"confirmPassword\": \"p@ssw0rD#137\",\r\n  \"firstName\": \"Test\",\r\n  \"lastName\": \"User\",\r\n  \"zipCode\": \"95050\",\r\n  \"phoneNumber\": \"1234567890\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG Register user - Password mismatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should fail with 400 for mismatched passwords\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res.error.details.some(d => d.message.includes(\"Passwords do not match\"))).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"user@example.com\",\r\n  \"password\": \"p@ssw0rD#123\",\r\n  \"confirmPassword\": \"p@ssworD#123\",\r\n  \"firstName\": \"Test\",\r\n  \"lastName\": \"User\",\r\n  \"zipCode\": \"95050\",\r\n  \"phoneNumber\": \"1234567890\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG Register user - Missing password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should fail with 400 for missing password\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res.error.details.some(d => d.path.includes(\"password\"))).to.be.true;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"user@example.com\",\r\n  \"confirmPassword\": \"p@ssworD#123\",\r\n  \"firstName\": \"Test\",\r\n  \"lastName\": \"User\",\r\n  \"zipCode\": \"95050\",\r\n  \"phoneNumber\": \"1234567890\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG Register user - Missing confirmPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should fail with 400 for missing confirmPassword\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res.error.details.some(d => d.path.includes(\"confirmPassword\"))).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"user@example.com\",\r\n  \"password\": \"p@ssw0rD#137\",\r\n  \"firstName\": \"Test\",\r\n  \"lastName\": \"User\",\r\n  \"zipCode\": \"95050\",\r\n  \"phoneNumber\": \"1234567890\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200/201\", function () {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", () => {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"let json = {};\r",
									"try { json = pm.response.json(); } catch (e) {}\r",
									"\r",
									"const token =\r",
									"  json?.data?.accessToken ||\r",
									"  json?.accessToken ||\r",
									"  json?.data?.token ||\r",
									"  json?.token;\r",
									"\r",
									"if (token) {\r",
									"  pm.environment.set(\"token\", token);\r",
									"}\r",
									"\r",
									"const userId = json?.data?.user?.id;\r",
									"if (userId) {\r",
									"  pm.environment.set(\"userId\", userId);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{email}}\", // owner\r\n  \"password\": \"p@ssword#135\" // replace with actual password\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Login - Nonexistent email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should fail with 401 and INVALID_CREDENTIALS error\", function () {\r",
									"  pm.response.to.have.status(401);\r",
									"  const res = pm.response.json();\r",
									"\r",
									"  pm.expect(res.success).to.eql(false);\r",
									"  pm.expect(res.error).to.be.an(\"object\");\r",
									"  pm.expect(res.error.code).to.eql(\"INVALID_CREDENTIALS\");\r",
									"  pm.expect(res.error.message).to.include(\"Invalid email or password\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"nouser@example.com\",\r\n  \"password\": \"p@ssw0rD#137\" \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG POST - Login - Missing email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should fail with 400 for missing email\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res.error.details.some(d => d.path.includes(\"email\"))).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"p@ssw0rD#137\" \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG POST - Login - Missing password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should fail with 400 for missing password\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res.error.details.some(d => d.path.includes(\"password\"))).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{email}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG POST - Login - Invalid email format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should fail with 400 for invalid email format\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res.error.details.some(d => d.path.includes(\"email\"))).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"test.user.gmail.com\",\r\n  \"password\": \"p@ssw0rD#137\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG POST - Wrong credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should fail with 401 for wrong credentials\", function () {\r",
									"  pm.response.to.have.status(401);\r",
									"  const res = pm.response.json();\r",
									"  \r",
									"  pm.expect(res.error.code).to.eql(\"INVALID_CREDENTIALS\");\r",
									"  pm.expect(res.error.message).to.include(\"Invalid\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"test.user@example.com\",\r\n  \"password\": \"p@ssworD#321\" \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG POST - Login - Empty payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should fail with 400 for empty payload\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res.error.code).to.eql(\"VALIDATION_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", () => {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"if (jsonData.success) {\r",
									"    const user = jsonData.data.user;\r",
									"\r",
									"    // Save user info to environment variables\r",
									"    pm.environment.set(\"userId\", user.id || \"\");\r",
									"    pm.environment.set(\"email\", user.email || \"\");\r",
									"    pm.environment.set(\"firstName\", user.firstName || \"\");\r",
									"    pm.environment.set(\"lastName\", user.lastName || \"\");\r",
									"    pm.environment.set(\"zipCode\", user.zipCode || \"\");\r",
									"    pm.environment.set(\"phoneNumber\", user.phoneNumber || \"\");\r",
									"    pm.environment.set(\"avatarUrl\", user.avatarUrl || \"\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG Get user - No Authorization header",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should fail with 401 for missing Authorization header\", function () {\r",
									"  pm.response.to.have.status(401);\r",
									"  const res = pm.response.json();\r",
									"\r",
									"  pm.expect(res.success).to.eql(false);\r",
									"  pm.expect(res.error.code).to.eql(\"UNAUTHORIZED\");\r",
									"  pm.expect(res.error.message).to.include(\"Missing Authorization header\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG Get user - Invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should fail with 401 for invalid token\", function () {\r",
									"  pm.response.to.have.status(401);\r",
									"  const res = pm.response.json();\r",
									"\r",
									"  pm.expect(res.success).to.eql(false);\r",
									"  pm.expect(res.error.code).to.eql(\"UNAUTHORIZED\");\r",
									"  pm.expect(res.error.message).to.include(\"Invalid token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkMDZkMmNhZC04Yzg5LTQ2YzMtYjUyZS1kYzNjOWIxNGY5Y2UiLCJpYXQiOjE3NTcwNDk2NTMsImV4cCI6MTc1NzEzNjA1M30.upzYM6fIBdjKumVKKPATJzl_ocFPbquE",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG Get user - Token expired (after 24 h)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.environment.get(\"run_expired_token_test\") === \"true\") {\r",
									"  pm.test(\"Should fail with 401 for expired token\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const res = pm.response.json();\r",
									"\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"    pm.expect(res.error.code).to.eql(\"UNAUTHORIZED\");\r",
									"    pm.expect(res.error.message).to.include(\"Token expired\");\r",
									"  });\r",
									"} else {\r",
									"  console.warn(\"Skipping expired token test — token still valid\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"me"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Items",
			"item": [
				{
					"name": "GET – Items list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.expect(pm.response.code).to.eql(200));",
									"",
									"const jsonData = pm.response.json();",
									"",
									"// Save first itemId",
									"if (jsonData.data && jsonData.data.length > 0) {",
									"    const first = jsonData.data[0];",
									"",
									"    pm.environment.set(\"itemId\", first.id);",
									"    pm.test(\"Saved itemId\", function () {",
									"        pm.expect(pm.environment.get(\"itemId\")).to.eql(first.id);",
									"    });",
									"",
									"    // Save categoryName (check both keys)",
									"    const category = first.categoryName || first.category?.name;",
									"    if (category) {",
									"        pm.environment.set(\"categoryName\", category);",
									"        pm.test(\"Saved categoryName\", function () {",
									"            pm.expect(pm.environment.get(\"categoryName\")).to.eql(category);",
									"        });",
									"    }",
									"}",
									"",
									"pm.test(\"Response success is true\", function () {",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Data array is not empty\", function () {",
									"    pm.expect(jsonData.data).to.be.an(\"array\");",
									"    pm.expect(jsonData.data.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Each item has required fields\", () => {",
									"  jsonData.data.forEach(item => {",
									"    pm.expect(item).to.have.property(\"id\");",
									"    pm.expect(item).to.have.property(\"title\");",
									"    pm.expect(item).to.have.property(\"status\");",
									"    pm.expect(item).to.have.property(\"dateReported\");",
									"    pm.expect(item).to.have.property(\"owner\");",
									"    pm.expect(item.owner).to.have.property(\"email\");",
									"    pm.expect(item).to.have.property(\"category\");",
									"    pm.expect(item.category).to.have.property(\"name\");",
									"  });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/items?page=1&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"items"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET – Items List with filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.expect(pm.response.code).to.eql(200));",
									"",
									"const j = pm.response.json();",
									"const first = j?.data?.[0];",
									"if (first?.id) pm.environment.set(\"itemId\", first.id);",
									"",
									"const cat = first?.categoryName || first?.category?.name;",
									"if (cat) pm.environment.set(\"categoryName\", cat);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/items?page=1&limit=10&sortBy=dateReported&sortOrder=desc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"items"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "sortBy",
									"value": "dateReported"
								},
								{
									"key": "sortOrder",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET – Items List by category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.expect(pm.response.code).to.eql(200));",
									"",
									"const res = pm.response.json();",
									"",
									"pm.test(\"Response has success = true\", () => {",
									"  pm.expect(res.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Data is an array\", () => {",
									"  pm.expect(res.data).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"All items belong to the requested category\", () => {",
									"  if (res.data.length > 0) {",
									"    res.data.forEach(item => {",
									"      // match either top-level categoryName or nested category.name",
									"      const cat = item.categoryName || (item.category && item.category.name);",
									"      pm.expect(cat).to.eql(pm.environment.get(\"categoryName\"));",
									"    });",
									"  } else {",
									"    console.log(\"No items found for this category\");",
									"  }",
									"});",
									"",
									"pm.test(\"Meta contains total, page, and limit\", () => {",
									"  pm.expect(res.meta).to.have.property(\"total\");",
									"  pm.expect(res.meta).to.have.property(\"page\");",
									"  pm.expect(res.meta).to.have.property(\"limit\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/items?category={{categoryName}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"items"
							],
							"query": [
								{
									"key": "category",
									"value": "{{categoryName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG GET – Items list - Zero limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should fail with invalid page\", () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
									"});",
									"",
									"const res = pm.response.json();",
									"pm.test(\"Response indicates failure\", () => {",
									"    pm.expect(res.success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Error code is VALIDATION_ERROR\", () => {",
									"    pm.expect(res.error.code).to.eql(\"VALIDATION_ERROR\");",
									"});",
									"",
									"pm.test(\"Validation message is correct\", () => {",
									"    pm.expect(res.error.message).to.include(\"Request validation failed\");",
									"});",
									"",
									"pm.test(\"Details show limit must be >=1\", () => {",
									"    pm.expect(res.error.details[0].path).to.eql(\"query.limit\");",
									"    pm.expect(res.error.details[0].code).to.eql(\"too_small\");",
									"    pm.expect(res.error.details[0].message).to.include(\">=1\");",
									"});",
									"",
									"pm.test(\"Response contains requestId\", () => {",
									"    pm.expect(res.meta).to.have.property(\"requestId\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/items?page=1&limit=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"items"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG GET – Items list - category does Not Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.expect(pm.response.code).to.eql(200));",
									"",
									"const res = pm.response.json();",
									"pm.test(\"Response indicates success\", () => {",
									"    pm.expect(res.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Data array is empty when category does not exist\", () => {",
									"    pm.expect(res.data).to.be.an(\"array\").that.is.empty;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/items?category=DoesNotExist&page=1&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"items"
							],
							"query": [
								{
									"key": "category",
									"value": "DoesNotExist"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Created 201\", () => pm.expect(pm.response.code).to.eql(201));",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response success = true\", () => {",
									"  pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Created item has an id\", () => {",
									"  pm.expect(jsonData.data).to.have.property(\"id\");",
									"  pm.expect(jsonData.data.id).to.be.a(\"string\");",
									"});",
									"",
									"if (jsonData?.success && jsonData.data) {",
									"    if (jsonData.data.id) {",
									"        pm.environment.set(\"itemId\", jsonData.data.id);",
									"    }",
									"",
									"    if (jsonData.data.categoryName) {",
									"        pm.environment.set(\"categoryName\", jsonData.data.categoryName);",
									"    }",
									"",
									"    if (jsonData.data.owner?.id) {",
									"        pm.environment.set(\"ownerId\", jsonData.data.owner.id);",
									"    }",
									"",
									"    if (jsonData.data.owner?.email) {",
									"        pm.environment.set(\"ownerEmail\", jsonData.data.owner.email);",
									"    }",
									"}",
									"",
									"pm.test(\"Created item has required fields\", () => {",
									"  pm.expect(jsonData.data).to.have.property(\"title\");",
									"  pm.expect(jsonData.data).to.have.property(\"description\");",
									"  pm.expect(jsonData.data).to.have.property(\"status\");",
									"  pm.expect(jsonData.data).to.have.property(\"categoryName\");",
									"  pm.expect(jsonData.data).to.have.property(\"zipCode\");",
									"  pm.expect(jsonData.data).to.have.property(\"dateReported\");",
									"  pm.expect(jsonData.data).to.have.property(\"updatedAt\");",
									"});",
									"",
									"pm.test(\"Category name matches request\", () => {",
									"  pm.expect(jsonData.data.categoryName).to.eql(pm.environment.get(\"categoryName\"));",
									"});",
									"",
									"pm.test(\"Owner info is present\", () => {",
									"  pm.expect(jsonData.data.owner).to.have.property(\"id\");",
									"  pm.expect(jsonData.data.owner).to.have.property(\"email\");",
									"});",
									"",
									"pm.test(\"Meta contains requestId\", () => {",
									"  pm.expect(jsonData.meta).to.have.property(\"requestId\");",
									"  pm.expect(jsonData.meta.requestId).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Temp Item {{$randomInt}}\",\n  \"description\": \"for patch/delete tests\",\n  \"status\": \"LOST\",\n  \"categoryName\": \"{{categoryName}}\",\n  \"zipCode\": \"10001\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG – Create - invalid body - missing title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 422 Unprocessable Entity\", () => {\r",
									"    pm.expect(pm.response.code).to.eql(422);\r",
									"});\r",
									"\r",
									"let res = {};\r",
									"try { res = pm.response.json(); } catch(e) {}\r",
									"\r",
									"pm.test(\"Response success = false\", () => {\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Error code is VALIDATION_ERROR\", () => {\r",
									"    pm.expect(res.error.code).to.eql(\"VALIDATION_ERROR\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message mentions missing fields\", () => {\r",
									"    pm.expect(res.error.message).to.include(\"Request validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains requestId\", () => {\r",
									"    pm.expect(res.meta).to.have.property(\"requestId\");\r",
									"    pm.expect(res.meta.requestId).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Missing title validation\", () => {\r",
									"    pm.expect(res.error.details[0].path).to.eql(\"title\");\r",
									"    pm.expect(res.error.details[0].message).to.include(\"expected string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"description\": \"Missing title\",\r\n  \"status\": \"LOST\",\r\n  \"categoryName\": \"{{categoryName}}\",\r\n  \"zipCode\": \"10001\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG – Create - invalid body - missing category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 422 Unprocessable Entity\", () => {\r",
									"    pm.expect(pm.response.code).to.eql(422);\r",
									"});\r",
									"\r",
									"let res = {};\r",
									"try { res = pm.response.json(); } catch(e) {}\r",
									"\r",
									"pm.test(\"Response success = false\", () => {\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Error code is VALIDATION_ERROR\", () => {\r",
									"    pm.expect(res.error.code).to.eql(\"VALIDATION_ERROR\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message mentions missing fields\", () => {\r",
									"    pm.expect(res.error.message).to.include(\"Request validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains requestId\", () => {\r",
									"    pm.expect(res.meta).to.have.property(\"requestId\");\r",
									"    pm.expect(res.meta.requestId).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Missing category validation\", () => {\r",
									"    pm.expect(res.error.details[0].path).to.eql(\"categoryName\");\r",
									"    pm.expect(res.error.details[0].message).to.include(\"expected string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Temp Item {{$randomInt}}\",\r\n  \"description\": \"Missing category\",\r\n  \"status\": \"LOST\",\r\n  \"zipCode\": \"10001\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG – Create - invalid body - Invalid status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 422 Unprocessable Entity\", () => {\r",
									"    pm.expect(pm.response.code).to.eql(422);\r",
									"});\r",
									"\r",
									"let res = {};\r",
									"try { res = pm.response.json(); } catch(e) {}\r",
									"\r",
									"pm.test(\"Response success = false\", () => {\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Error code is VALIDATION_ERROR\", () => {\r",
									"    pm.expect(res.error.code).to.eql(\"VALIDATION_ERROR\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message mentions missing fields\", () => {\r",
									"    pm.expect(res.error.message).to.include(\"Request validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains requestId\", () => {\r",
									"    pm.expect(res.meta).to.have.property(\"requestId\");\r",
									"    pm.expect(res.meta.requestId).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Invalid status validation\", () => {\r",
									"    let statusError = res.error.details.find(d => d.path === \"status\");\r",
									"    pm.expect(statusError).to.exist;\r",
									"    pm.expect(statusError.message).to.include(\"expected one of\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Temp Item {{$randomInt}}\",\r\n  \"description\": \"Invalid status\",\r\n  \"status\": \"INVALID_STATUS\",\r\n  \"categoryName\": \"{{categoryName}}\",\r\n  \"zipCode\": \"10001\"\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG – Create Item - empty body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 422 Unprocessable Entity\", () => {\r",
									"    pm.expect(pm.response.code).to.eql(422);\r",
									"});\r",
									"\r",
									"let res = {};\r",
									"try { res = pm.response.json(); } catch(e) {}\r",
									"\r",
									"pm.test(\"Response success = false\", () => {\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Error code is VALIDATION_ERROR\", () => {\r",
									"    pm.expect(res.error.code).to.eql(\"VALIDATION_ERROR\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message mentions invalid input\", () => {\r",
									"    pm.expect(res.error.message).to.include(\"Request validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Details mention expected object\", () => {\r",
									"    pm.expect(res.error.details[0].expected).to.eql(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains requestId\", () => {\r",
									"    pm.expect(res.meta).to.have.property(\"requestId\");\r",
									"    pm.expect(res.meta.requestId).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG – Create without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 401 Unauthorized\", () => {\r",
									"    pm.expect(pm.response.code).to.eql(401);\r",
									"});\r",
									"\r",
									"let res = {};\r",
									"try { res = pm.response.json(); } catch(e) {}\r",
									"\r",
									"pm.test(\"Response success = false\", () => {\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Error code is UNAUTHORIZED\", () => {\r",
									"    pm.expect(res.error.code).to.eql(\"UNAUTHORIZED\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Missing Authorization header'\", () => {\r",
									"    pm.expect(res.error.message).to.eql(\"Missing Authorization header\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains requestId\", () => {\r",
									"    pm.expect(res.meta).to.have.property(\"requestId\");\r",
									"    pm.expect(res.meta.requestId).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Temp Item {{$randomInt}}\",\r\n  \"description\": \"for patch/delete tests\",\r\n  \"status\": \"LOST\",\r\n  \"categoryName\": \"{{categoryName}}\",\r\n  \"zipCode\": \"10001\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET – Item by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.expect(pm.response.code).to.eql(200));\r",
									"\r",
									"// Parse response safely\r",
									"let jsonData = {};\r",
									"try { jsonData = pm.response.json(); } catch (e) {}\r",
									"\r",
									"\r",
									"pm.test(\"Response success = true\", () => {\r",
									"    pm.expect(jsonData.success).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Item has correct id\", () => {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"itemId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Item has required fields\", () => {\r",
									"    pm.expect(jsonData.data).to.have.property(\"title\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"description\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"categoryName\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"zipCode\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/v1/items/{{itemId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"items",
								"{{itemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG GET – Item by not valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 422 Unprocessable Entity\", () => {\r",
									"    pm.expect(pm.response.code).to.eql(422);\r",
									"});\r",
									"\r",
									"let res = {};\r",
									"try { res = pm.response.json(); } catch (e) {}\r",
									"\r",
									"pm.test(\"Response success = false\", () => {\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Error code is VALIDATION_ERROR\", () => {\r",
									"    pm.expect(res.error.code).to.eql(\"VALIDATION_ERROR\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Request validation failed'\", () => {\r",
									"    pm.expect(res.error.message).to.eql(\"Request validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Details show invalid UUID\", () => {\r",
									"    pm.expect(res.error.details[0].path).to.eql(\"params.id\");\r",
									"    pm.expect(res.error.details[0].code).to.eql(\"invalid_format\");\r",
									"    pm.expect(res.error.details[0].message).to.eql(\"id must be a valid UUID\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains requestId\", () => {\r",
									"    pm.expect(res.meta).to.have.property(\"requestId\");\r",
									"    pm.expect(res.meta.requestId).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/v1/items/notItemId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"items",
								"notItemId"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG GET – Item by id - Not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 404 Not Found\", () => {\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"});\r",
									"\r",
									"let res = {};\r",
									"try { res = pm.response.json(); } catch (e) {}\r",
									"\r",
									"pm.test(\"Response success = false\", () => {\r",
									"    pm.expect(res.success).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Error code is RESOURCE_NOT_FOUND\", () => {\r",
									"    pm.expect(res.error.code).to.eql(\"RESOURCE_NOT_FOUND\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Item not found'\", () => {\r",
									"    pm.expect(res.error.message).to.eql(\"Item not found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains requestId\", () => {\r",
									"    pm.expect(res.meta).to.have.property(\"requestId\");\r",
									"    pm.expect(res.meta.requestId).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/v1/items/30e33e0d-e21c-4f6c-9219-6becdc822432",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"items",
								"30e33e0d-e21c-4f6c-9219-6becdc822432"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update item (owner)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.expect(pm.response.code).to.eql(200));",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Title updated\", () => pm.expect(jsonData?.data?.title).to.eql(\"Updated Title\"));",
									"pm.test(\"Status is RESOLVED\", () => pm.expect(jsonData?.data?.status).to.eql(\"RESOLVED\"));",
									"pm.test(\"isResolved true (auto)\", () => pm.expect(jsonData?.data?.isResolved).to.eql(true));",
									"pm.test(\"Zip changed\", () => pm.expect(jsonData?.data?.zipCode).to.eql(\"10002\"));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Updated Title\",\n  \"description\": \"Updated description\",\n  \"status\": \"RESOLVED\",\n  \"zipCode\": \"10002\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/items/{{itemId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"items",
								"{{itemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete item (owner)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200 or 204\", () => pm.expect(pm.response.code).to.be.oneOf([200, 204]));\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body is empty\", () => {\r",
									"    pm.expect(pm.response.text()).to.eql(\"\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/items/{{itemId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"items",
								"{{itemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG - Delete item (owner) - Not Found after delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200 or 204\", () => pm.expect(pm.response.code).to.be.oneOf([200, 204]));\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response success = false\", () => {\r",
									"    pm.expect(jsonData.success).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Error code is RESOURCE_NOT_FOUND\", () => {\r",
									"    pm.expect(jsonData.error.code).to.eql(\"RESOURCE_NOT_FOUND\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Item not found'\", () => {\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Item not found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains requestId\", () => {\r",
									"    pm.expect(jsonData.meta).to.have.property(\"requestId\");\r",
									"    pm.expect(jsonData.meta.requestId).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/items/{{itemId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"items",
								"{{itemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG - Delete item (not owner) - Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 403 Forbidden\", () => {\r",
									"    pm.expect(pm.response.code).to.eql(403);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response success = false\", () => {\r",
									"    pm.expect(jsonData.success).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Error code is FORBIDDEN\", () => {\r",
									"    pm.expect(jsonData.error.code).to.eql(\"FORBIDDEN\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Forbidden: not your item'\", () => {\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Forbidden: not your item\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains requestId\", () => {\r",
									"    pm.expect(jsonData.meta).to.have.property(\"requestId\");\r",
									"    pm.expect(jsonData.meta.requestId).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/items/{{itemId_temp}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"items",
								"{{itemId_temp}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "GET - All categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.expect(pm.response.code).to.eql(200));\r",
									"\r",
									"pm.test(\"Response is valid JSON\", () => {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"let j = {};\r",
									"try { j = pm.response.json(); } catch (e) {}\r",
									"\r",
									"const list =\r",
									"  Array.isArray(j.data) ? j.data :\r",
									"  (Array.isArray(j?.data?.items) ? j.data.items : []);\r",
									"\r",
									"const firstId = list?.[0]?.name;\r",
									"if (firstId) pm.environment.set(\"categoryName\", firstId);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/categories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get One category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.expect(pm.response.code).to.eql(200));\r",
									"\r",
									"pm.test(\"Response is valid JSON\", () => {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"let j = {};\r",
									"try { j = pm.response.json(); } catch (e) {}\r",
									"\r",
									"if (j && j.success && j.data && j.data.name) {\r",
									"    pm.environment.set(\"categoryName\", j.data.name);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/categories/{{categoryName}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"{{categoryName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG Get One category - Nonexistent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should fail with 404 for nonexistent category ID\", function () {\r",
									"  pm.response.to.have.status(404);\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res.success).to.eql(false);\r",
									"  pm.expect(res.message).to.eql(\"Not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/categories/nocategoryName",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"nocategoryName"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is between 200 and 2301\", () => {\r",
									"    pm.expect(pm.response.code).to.be.within(200, 201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", () => {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"let j = {};\r",
									"try { j = pm.response.json(); } catch (e) {}\r",
									"\r",
									"if (j && j.success && j.data && j.data.name) {\r",
									"    pm.environment.set(\"categoryName\", j.data.name);\r",
									"}\r",
									"\r",
									"pm.test(\"Success flag is true\", () => {\r",
									"    pm.expect(j.success).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Category name matches expected\", () => {\r",
									"    pm.expect(j.data.name).to.eql(\"Test Category\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test Category\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/categories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG - Create category - EMPTY name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should fail with 400 for empty category name\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res.success).to.eql(false);\r",
									"  pm.expect(res.message).to.include(\"Category name cannot be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/categories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG - Create category with exist name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should fail with 409 for duplicate category name\", function () {\r",
									"  pm.response.to.have.status(409);\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res.success).to.eql(false);\r",
									"  pm.expect(res.message).to.include(\"already exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Clothing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/categories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.expect(pm.response.code).to.eql(200));\r",
									"\r",
									"pm.test(\"Response is valid JSON\", () => {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"let j = {};\r",
									"try { j = pm.response.json(); } catch (e) {}\r",
									"\r",
									"if (j && j.success && j.data && j.data.name) {\r",
									"    pm.environment.set(\"categoryName\", j.data.name);\r",
									"}\r",
									"\r",
									"pm.test(\"Success flag is true\", () => {\r",
									"    pm.expect(j.success).to.eql(true);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test category update\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/categories/{{categoryName}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"{{categoryName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG Update category - nonexistent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should fail with 404 for updating nonexistent category\", function () {\r",
									"  pm.response.to.have.status(404);\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res.success).to.eql(false);\r",
									"  pm.expect(res.message).to.include(\"Not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"UpdatedName\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/categories/nocategoryName",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"nocategoryName"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", () => {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Success flag is true\", () => {\r",
									"    pm.expect(jsonData.success).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Message confirms deletion\", () => {\r",
									"    pm.expect(jsonData.message).to.include(\"Category deleted\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is under 500ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/categories/{{categoryName}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"{{categoryName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete category - Not Found (after delete)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should fail with 404 for deleting nonexistent category\", function () {\r",
									"  pm.response.to.have.status(404);\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res.success).to.eql(false);\r",
									"  pm.expect(res.message).to.eql(\"Not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Items 1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/categories/{{categoryName}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"{{categoryName}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}